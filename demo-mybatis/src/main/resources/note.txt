1.PageHelper默认的分页逻辑,com.github.pagehelper.PageHelper
2.实现com.github.pagehelper.Dialect接口可以定制自己的分页逻辑(比如123 [4] 567)
3.参数
[1]:helpDialect 分页方式(自动检测，sqlserver2012需要指明sqlserver2012)
oracle,mysql,db2,sqlserver,h2,sqlserver2012 ....
[2]:offsetAsPageNum 默认false,RowBounds模式下,为true将offset视为pageNum,加上size即可完成分页(reasonable强制为false)
[3]:rowBoundsWithCount 默认false,RowBounds模式下,为true 使用 RowBounds 分页会进行 count 查询
[4]:pageSizeZero：默认值为 false，当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）。
[5]:reasonable：分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页。默认false 时，根据传入参数进行查询。
[6]:params：为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值， 可以配置 pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值， 默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero。
[7]:supportMethodsArguments：支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页。
[8];autoRuntimeDialect：默认值为 false。设置为 true 时，允许在运行时根据多数据源自动识别对应方言的分页 （不支持自动选择sqlserver2012，只能使用sqlserver）
[9]:closeConn：默认值为 true。当使用运行时动态数据源或没有设置 helperDialect 属性自动获取数据库类型时，
会自动获取一个数据库连接， 通过该属性来设置是否关闭获取的这个连接，默认true关闭，设置为 false 后，不会关闭获取的连接，这个参数的设置要根据自己选择的数据源来决定。

小结
1.使用rowBounds时还想查询总数，要设置 rowBoundsWithCount 为true
2.rowBounds默认参数为offset,limit, offsetAsPageNum为true ,offset会当成 pageNum 使用，limit 和 pageSize 含义相同。
3.pageSizeZero设为true,分页后pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果
4.reasonable 保障了分页接口的可靠性
5.对于动态数据源，连接的是不同的数据库的情况，配置 autoRuntimeDialect 为 true，这样在使用不同数据源时，会使用匹配的分页进行查询。 这种情况下，你还需要特别注意 closeConn 参数，由于获取数据源类型会获取一个数据库连接，所以需要通过这个参数来控制获取连接后，是否关闭该连接。 默认为 true，有些数据库连接关闭后就没法进行后续的数据库操作。
而有些数据库连接不关闭就会很快由于连接数用完而导致数据库无响应。
所以在使用该功能时，特别需要注意你使用的数据源是否需要关闭数据库连接。


